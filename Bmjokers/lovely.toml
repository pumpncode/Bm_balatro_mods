[manifest]
version = "1.0.4j"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = "after"
payload = '''
    if self.ability.name == 'Supergodcard' then
        local sum = 0
        for i = 1, #G.consumeables.cards do
            sum = sum + G.consumeables.cards[i].sell_cost 
        end
        self.ability.extra.suml = sum
    end

    if self.ability.name == 'Smartcowboy' then
        local smartcowboy_mult = math.floor((G.GAME.dollars + (G.GAME.dollar_buffer or 0))/self.ability.extra.perdollar)
        self.ability.extra.x_mult = 1 + self.ability.extra.perxmult * math.abs(smartcowboy_mult)
    end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "set = center.set,"
position = "after"
payload = '''
retriggers = self.ability and self.ability.retriggers or 0,
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "ret.jokers = jokers"
position = "at"
payload = '''
if jokers and jokers.duplication then
    for k, v in ipairs(jokers) do
        if k ~= duplication then
            ret['jokers'..k] = v
        end
    end
else
    ret.jokers = jokers
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then"
position = "before"
payload = '''
        if self.ability.name == 'Microchip' then
            local other_joker = nil
            for i = 1, #G.jokers.cards do
                if G.jokers.cards[i] == self then other_joker = G.jokers.cards[i+1] end
            end
            if other_joker and other_joker ~= self and other_joker.config.center.blueprint_compat then
                self.ability.blueprint_compat = 'compatible'
            else
                self.ability.blueprint_compat = 'incompatible'
            end
        end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "context.blueprint_card = old_context_blueprint_card"
position = "after"
payload = '''
--[[
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "return other_joker_ret"
position = "before"
payload = '''
]]
                if other_joker_ret and other_joker_ret.duplication then
                    for k, v in ipairs(other_joker_ret) do
                        v.card = eff_card
                        v.colour = self.ability.name == "Blueprint" and G.C.BLUE or G.C.RED
                    end
                    return other_joker_ret
                elseif other_joker_ret then
                    other_joker_ret.card = eff_card
                    other_joker_ret.colour = self.ability.name == "Blueprint" and G.C.BLUE or G.C.RED
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "-- TARGET: calc_dollar_bonus per card"
position = "after"
payload = '''
--[[
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({dollars = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})"
position = "before"
payload = '''
]]
            if ret then
                if _card.ability.retriggers and _card.ability.retriggers >= 1 then
                    for ii = 1, _card.ability.retriggers do
                        i = i+1
                        add_round_eval_row({dollars = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})
                        pitch = pitch + 0.06
                        dollars = dollars + ret
                    end
                end
                i = i+1
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "joker_eval.jokers.juice_card = _joker"
position = "at"
payload = '''
if joker_eval.jokers then
    joker_eval.jokers.juice_card = _joker
else
    for k, v in pairs(joker_eval) do
        if string.find(k, 'jokers') then
            v.juice_card = _joker
        end
    end
end
'''
match_indent = true
overwrite = false
