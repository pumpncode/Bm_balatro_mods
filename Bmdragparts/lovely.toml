[manifest]
version = "1.0.1a"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = '''--The object being dragged'''
position = "after"
payload = '''
    if self.is_cursor_down then 
        self.cursor_down.distance = math.max(Vector_Dist(self.cursor_down.T, self.cursor_hover.T), self.cursor_down.distance or 0)
    else
        self.cursor_down.distance = nil
    end
    if not self.dragging.handled and self.cursor_down.distance and (self.cursor_down.distance > 0.2) and G.SETTINGS.allow_drag_operation then
        create_drag_target_from_card(self.dragging.target)
        self.dragging.handled = true
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = '''self.cursor_up.handled = true'''
position = "before"
payload = '''
        if self.cursor_down.target and self.dragging.prev_target then
            local releasable = nil
            for _, v in ipairs(self.collision_list) do
                if v.states.hover.can and (not v.states.drag.is) and (v ~= self.dragging.prev_target) then
                    releasable = v
                    break 
                end
            end
            if releasable and releasable.states.release_on.can then 
                self.released_on.target = releasable
                self.released_on.handled = false
            end
        end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = '''if not self.released_on.handled and self.dragging.prev_target then'''
position = "at"
payload = '''
if not self.released_on.handled and self.released_on.target and self.dragging.prev_target then
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = '''if self.parent then self.parent:release(other) end'''
position = "before"
payload = '''
    if self.config.release_func then 
        self.config.release_func(other)
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = '''--Draw the outline for highlighted buttons'''
position = "before"
payload = '''
    if self.config.pulse_border then
        self.border_pulse_timer = self.border_pulse_timer or G.TIMERS.REAL
        local lw = 2*math.max(0, 0.5*math.cos(6*(G.TIMERS.REAL - self.border_pulse_timer)) + 0.5)
        prep_draw(self, 1)
        love.graphics.scale((1)/(G.TILESIZE))
        love.graphics.setLineWidth(lw + 1)
        love.graphics.setColor(adjust_alpha(G.C.BLACK, 0.2*lw, true))
        self:draw_pixellated_rect('fill', parallax_dist)
        love.graphics.setColor(self.config.colour[4] > 0 and mix_colours(G.C.WHITE, self.config.colour, 0.8) or G.C.WHITE)
        self:draw_pixellated_rect('line', parallax_dist)
        love.graphics.pop()
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''create_option_cycle({label = localize('b_graphics_mipmap_level'),scale = 0.8, options = SMODS.config.graphics_mipmap_level_options, opt_callback = 'SMODS_change_mipmap', current_option = SMODS.config.graphics_mipmap_level}),'''
position = "after"
payload = '''
      create_toggle({label = localize('ph_allow_drag_operation'), ref_table = G.SETTINGS, ref_value = 'allow_drag_operation'}),
'''
match_indent = false
overwrite = false